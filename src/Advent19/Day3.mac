ROUTINE Advent19.Day3
#include helper
Start() public {
  #; $$$inputAll(input)
  #; $$$inputFull(input)
  $$$input(wires)
  #; Do draw(.grid, 1, $Listfromstring("R75,D30,R83,U83,L12,D49,R71,U7,L72"))
  #; Do draw(.grid, 2, $Listfromstring("U62,R66,U55,R34,D71,R55,D58,R83"), .part1, .part2)

  #; Do draw(.grid, $Listfromstring("R98,U47,R26,D63,R33,U87,L62,D20,R33,U53,R51"), .cross)
  #; Do draw(.grid, $Listfromstring("U98,R91,D20,R16,D67,R40,U7,R15,U6,R7"), .cross)
  #; Do display(.grid, -10, 10)
  Do draw(.grid, 1, $Listfromstring(wires(1)))
  Do draw(.grid, 2, $Listfromstring(wires(2)), .part1, .part2)

  Write !!
  Write !,"Part1 = ", $Order(part1(""))
  Write !,"Part2 = ", $Order(part2(""))
  #; ZWrite wires,cross
}
display(grid, min, max) {
  For y=min:1:max {
    Write !
    For x=min:1:max {
      Set val = $Case($Get(grid(y,x)), 1: "#", 2: "X", : ".")
      Write val
    }
  }
}
draw(grid, type, wire, part1, part2) {
  Set x = 0,y = 0, steps = 0
  For i=1:1:$Listlength(wire) {
    Set info = $Listget(wire, i)
    Set dir = $Extract(info, 1)
    Set len = $Extract(info, 2, *)

    Set dx = $Case(dir, "L": -1, "R": 1, : 0)
    Set dy = $Case(dir, "U": -1, "D": 1, : 0)
    For k=1:1:len {
      Set x = x + dx
      Set y = y + dy
      Set steps = steps + 1
      if $Data(grid(y, x), crossInfo) {
        Set $Listbuild(crossType, crossSteps) = crossInfo
        If crossType'=type {
          Set val = $ZAbs(y) + $ZAbs(x)
          Write "Cross: ", val, " [",x,":",y,"] - ",crossType," - ",steps,":",crossSteps,!
          Set part1(val) = $Listbuild(x, y)
          Set part2(steps+crossSteps) = ""
        }

      }
      Set grid(y, x) = $Listbuild(type, steps)
    }
  }
}
