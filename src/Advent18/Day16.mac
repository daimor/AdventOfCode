ROUTINE Advent18.Day16
#include helper
Start() public {
  #; $$$inputAll(input)
  #; $$$inputFull(input)
  $$$input(lines)
  for i=1:1:lines {
    set line = lines(i)
    if line["Before" {
      set before = line
      set before = $PIECE($PIECE(before, "]"), "[", 2)
      set before = $LISTFROMSTRING(before, ", ")
      set command = $LISTFROMSTRING(lines($INCREMENT(i)), " ")
      set after = lines($INCREMENT(i))
      set after = $PIECE($PIECE(after, "]"), "[", 2)
      set after = $LISTFROMSTRING(after, ", ")

      set before = $$norm(before)
      set command = $$norm(command)
      set after = $$norm(after)

      set commands($INCREMENT(commands)) = $LISTBUILD(before, command, after)
    } elseif line'="" {
      set code($INCREMENT(code)) = $$norm($LISTFROMSTRING(line, " "))
    }
  }

  set part1 = 0
  for i=1:1:commands {
    set $LISTBUILD(before, command, after) = commands(i)

    set $LISTBUILD(opcode, a, b, c) = command

    set count = 0
    set operations = $LISTBUILD(
      "addr", "addi",
      "mulr", "muli",
      "banr", "bani",
      "borr", "bori",
      "setr", "seti",
      "gtir", "gtri", "gtrr",
      "eqir", "eqri", "eqrr"
    )
    for j=1:1:$LISTLENGTH(operations) {
      set oper = $LISTGET(operations, j)
      set result = $$run(oper, before, a, b, c)
      if result=after,$INCREMENT(count) {
        if '$DATA(opcodes(opcode), tmp) || '$LISTFIND(tmp, oper) {
          set opcodes(opcode) = $GET(opcodes(opcode)) _ $LISTBUILD(oper)
        }
      }
    }
    if count>2, $i(part1)
  }
  write !
  write !,"Part1 = ",part1,!


  do unique(.opcodes)

  set registers = $LISTBUILD(0, 0, 0, 0)

  for i=1:1:code {
    set line = code(i)
    set $LISTBUILD(opcode, a, b, c) = line

    set oper = $LISTGET(opcodes(opcode), 1)
    set registers = $$run(oper, registers, a, b, c)
  }

  write !,"Part2 = ",$LISTGET(registers)
}
norm(list) {
  for j=1:1:$LISTLENGTH(list) set $LIST(list, j) = +$LIST(list, j)
  quit list
}
unique(&opcodes) {
  set done = 1
  do {
    for opcode=0:1:15 {
      continue:$LISTLENGTH(opcodes(opcode))>1
      continue:$DATA(was(opcode))
      set was(opcode) = 1
      set oper = $LISTGET(opcodes(opcode), 1)
      set done = 1
      for j=0:1:15 {
        continue:j=opcode
        set ind = $LISTFIND(opcodes(j), oper)
        continue:'ind
        set $LIST(opcodes(j), ind, ind) = ""
        set done = 0
      }
    }
  } while 'done
}
dec(bit) {
  set res = 0
  for i=1:1:64 {
    continue:'$BIT(bit, i)
    set res = res + (2**(i-1))
  }
  return res
}
run(oper, registers, a, b, c) [result] public {
  set run ="result=$$"_oper_"($LB("_$LISTTOSTRING(registers, ", ")_") , "_a_", "_b_", "_c_")"
  set @(run)
  quit result
}
addr(registers, a, b, c) public {
  set $LIST(registers, c + 1) = $LISTGET(registers, a + 1) + $LISTGET(registers, b + 1)
  return registers
}
addi(registers, a, b, c) public {
  set $LIST(registers, c + 1) = $LISTGET(registers, a + 1) + b
  return registers
}
mulr(registers, a, b, c) public {
  set $LIST(registers, c + 1) = $LISTGET(registers, a + 1) * $LISTGET(registers, b + 1)
  return registers
}
muli(registers, a, b, c) public {
  set $LIST(registers, c + 1) = $LISTGET(registers, a + 1) * b
  return registers
}
banr(registers, a, b, c) public {
  set a = $FACTOR($LISTGET(registers, a + 1))
  set b = $FACTOR($LISTGET(registers, b + 1))
  set $LIST(registers, c + 1) = $$dec($BITLOGIC(a&b))
  return registers
}
bani(registers, a, b, c) public {
  set a = $FACTOR($LISTGET(registers, a + 1))
  set b = $FACTOR(b)
  set $LIST(registers, c + 1) = $$dec($BITLOGIC(a&b))
  return registers
}
borr(registers, a, b, c) public {
  set a = $FACTOR($LISTGET(registers, a + 1))
  set b = $FACTOR($LISTGET(registers, b + 1))
  set $LIST(registers, c + 1) = $$dec($BITLOGIC(a|b))
  return registers
}
bori(registers, a, b, c) public {
  set a = $FACTOR($LISTGET(registers, a + 1))
  set b = $FACTOR(b)
  set $LIST(registers, c + 1) = $$dec($BITLOGIC(a|b))
  return registers
}

setr(registers, a, b, c) public {
  set $LIST(registers, c + 1) = $LISTGET(registers, a + 1)
  return registers
}
seti(registers, a, b, c) public {
  set $LIST(registers, c + 1) = a
  return registers
}

gtir(registers, a, b, c) public {
  set b = $LISTGET(registers, b + 1)
  set $LIST(registers, c + 1) = (a>b)
  return registers
}
gtri(registers, a, b, c) public {
  set a = $LISTGET(registers, a + 1)
  set $LIST(registers, c + 1) = (a>b)
  return registers
}
gtrr(registers, a, b, c) public {
  set a = $LISTGET(registers, a + 1)
  set b = $LISTGET(registers, b + 1)
  set $LIST(registers, c + 1) = (a>b)
  return registers
}

eqir(registers, a, b, c) public {
  set b = $LISTGET(registers, b + 1)
  set $LIST(registers, c + 1) = (a=b)
  return registers
}
eqri(registers, a, b, c) public {
  set a = $LISTGET(registers, a + 1)
  set $LIST(registers, c + 1) = (a=b)
  return registers
}
eqrr(registers, a, b, c) public {
  set a = $LISTGET(registers, a + 1)
  set b = $LISTGET(registers, b + 1)
  set $LIST(registers, c + 1) = (a=b)
  return registers
}
