ROUTINE helper
knot(str) public {
  Set lengths = ""
  For i=1:1:$Length(str) {
    Set lengths = lengths _ $ListBuild($Ascii(str, i))
  }
  Set lengths = lengths _ $ListBuild(17, 31, 73, 47, 23)
  Set hash = $$knot^Advent17.Day10(.data, lengths, 256, 64)
  Return hash
}
toBits(str) public {
  Set bits = ""
  For i=1:1:$Length(str) {
    Set c = $ZHex($Extract(str, i))
    Set b = $Factor(c)
    For j=4:-1:1 {
      Set $Bit(bits, $BitCount(bits) + 1) = $Bit(b,j)
    }
  }
  Return bits
}
max(&list, &ind, delim = ",") public {
  Set max = -99999,ind=""
  If $Data(list)\10 {
    Set el = ""
    For {
      Set el = $Order(list(el), 1, v)
      Quit:el=""
      If $Data(v),v>max {
        Set max = v,ind=el
      }
      ElseIf '$Data(v),el>max {
        Set max = el
      }
    }
  }
  Else {
    If '$ListValid(list) Set list=$ListFromString(list, delim)
    For i=1:1:$ListLength(list) {
      Set v = $ListGet(list, i)
      If v>max Set max=v,ind=i
    }
  }
  Return max
}
min(&list, &ind, delim = ",") public {
  Set min = 1e13,ind=""
  If $Data(list)\10 {
    Set el = ""
    For {
      Set el = $Order(list(el), 1, v)
      Quit:el=""
      If $Data(v),v<min {
        Set min = v,ind=el
      }
      ElseIf '$Data(v),el<min {
        Set min = el
      }
    }
  }
  Else {
    If '$ListValid(list) Set list=$ListFromString(list, delim)
    For i=1:1:$ListLength(list) {
      Set v = $ListGet(list, i)
      If v<min Set min=v,ind=i
    }
  }
  Return min
}
sum(list, delim = ",") public {
  Set sum = 0
  If $Data(list)\10 {
    Set el = ""
    For {
      Set el = $Order(list(el), 1, v)
      Quit:el=""
      If $Increment(sum, v)
    }
  }
  Else {
    If '$ListValid(list) Set list=$ListFromString(list, delim)
    For i=1:1:$ListLength(list) {
      Set v = $ListGet(list, i)
      If $Increment(sum, v)
    }
  }
  Return sum
}
sort(list) public {
  Set asList = 0
  If $ListValid(list) {
    Set asList = 1
    Set ptr = 0
    While $ListNext(list, ptr, val) {
      If $Increment(sort(val))
    }
  } Else {
    For i=1:1:$Length(list) {
      Set c = $Extract(list, i)
      If $Increment(sort(c))
    }
  }
  Set res = ""
  Set c = ""
  For {
    Set c = $Order(sort(c), 1, cnt)
    Quit:c=""
    If asList {
      Set res = res _ $ListBuild(c)
    } Else {
      Set res = res _ $Translate($Justify("", cnt), " ", c)
    }
  }
  Return res
}
sortList(list) {
  Quit res
}
toHex(string) public {
  Set res = ""
  For i=1:1:$Length(string) {
    Set val = $Ascii(string, i)
    Set hex = $ZConvert($Translate($Justify($ZHex(val), 2), " ", "0"), "l")
    Set res = res_hex
  }
  Return res
}
insert(data, pos, val) public {
  Set val = $List(data, 1, pos)_$ListBuild(val)_$List(data, pos + 1, $ListLength(data))
  Return val
}
dec(bit, len = 32) public {
  Set res = 0
  For i=1:1:len {
    Continue:'$Bit(bit, i)
    Set res = res + (2**(i-1))
  }
  Return res
}
and(a, b, len = 32) public {
  Set a = $Factor(a)
  Set b = $Factor(b)
  Return $$dec($BitLogic(a&b, len))
}
or(a, b, len = 32) public {
  Set a = $Factor(a)
  Set b = $Factor(b)
  Return $$dec($BitLogic(a|b, len))
}
xor(a, b, len = 32) public {
  Set a = $Factor(a)
  Set b = $Factor(b)
  Return $$dec($BitLogic(a^b, len))
}
gcd(a, b) public {
  Set a = $ZAbs(a), b = $ZAbs(b)
  While b {
    Set $ListBuild(a, b) = $ListBuild(b, a#b)
  }
  Quit a
}
lcm(list) public {
  Set $ListBuild(v1, v2) = list
  Set val = $ZAbs(v1)/$$gcd(v1,v2)*$ZAbs(v2)
  If $ListLength(list)=2 {
    Quit val
  }
  Quit $$lcm($ListBuild(val)_$List(list, 3, *))
}
ceil(val) public {
  Return $System.SQL.CEILING(val)
}
match(regexp, text) public {
  Set res = ""
  Set pattern = ##class(%Regex.Matcher).%New(regexp)
  Set pattern.Text = text
  If (pattern.Locate()) {
    For i=1:1:pattern.GroupCount {
      Set res = res _ $ListBuild(pattern.Group(i))
    }
  }
  Quit res
}