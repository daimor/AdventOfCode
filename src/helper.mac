ROUTINE helper
knot(str) public {
  set lengths = ""
  for i=1:1:$l(str) {
    set lengths = lengths _ $lb($a(str, i))
  }
  set lengths = lengths _ $lb(17, 31, 73, 47, 23)
  set hash=$$knot^Advent17.Day10(.data, lengths, 256, 64)
  return hash
}
toBits(str) public {
  set bits = ""
  for i=1:1:$l(str) {
    set c = $zhex($e(str, i))
    set b = $factor(c)
    for j=4:-1:1 {
      set $bit(bits, $bitcount(bits) + 1) = $bit(b,j)
    }
  }
  return bits
}
max(&list, &ind, delim = ",") public {
  set max = -99999,ind=""
  if $d(list)\10 {
    set el=""
    for {
      set el=$o(list(el), 1, v)
      quit:el=""
      if $d(v),v>max {
        set max=v,ind=el
      } elseif '$d(v),el>max {
        set max=el
      }
    }
  } else {
    if '$lv(list) set list=$lfs(list, delim)
    for i=1:1:$ll(list) {
      set v = $lg(list, i)
      if v>max set max=v,ind=i
    }
  }
  return max
}
min(&list, &ind, delim = ",") public {
  set min = 99999999,ind=""
  if $d(list)\10 {
    set el=""
    for {
      set el=$o(list(el), 1, v)
      quit:el=""
      if $d(v),v<min {
        set min=v,ind=el
      } elseif '$d(v),el<min {
        set min=el
      }
    }
  } else {
    if '$lv(list) set list=$lfs(list, delim)
    for i=1:1:$ll(list) {
      set v = $lg(list, i)
      if v<min set min=v,ind=i
    }
  }
  return min
}
sum(list, delim = ",") public {
  set sum = 0
  if $d(list)\10 {
    set el=""
    for {
      set el=$o(list(el), 1, v)
      quit:el=""
      if $i(sum, v)
    }
  } else {
    if '$lv(list) set list=$lfs(list, delim)
    for i=1:1:$ll(list) {
      set v = $lg(list, i)
      if $i(sum, v)
    }
  }
  return sum
}
sort(list) public {
  for i=1:1:$l(list) {
    set c = $e(list, i)
    if $i(sort(c))
  }
  set res = ""
  set c = ""
  for {
    set c = $o(sort(c), 1, cnt)
    quit:c=""
    set res = res _ $tr($j("", cnt), " ", c)
  }
  return res
}
toHex(string) public {
  set res = ""
  for i=1:1:$l(string) {
    set val = $a(string, i)
    set hex = $zcvt($tr($j($zhex(val), 2), " ", "0"), "l")
    set res = res_hex
  }
  return res
}
insert(data, pos, val) public {
  set val = $li(data, 1, pos)_$lb(val)_$li(data, pos + 1, $ll(data))
  return val
}