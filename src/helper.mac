ROUTINE helper
knot(str) public {
  SET lengths = ""
  FOR i=1:1:$l(str) {
    SET lengths = lengths _ $lb($a(str, i))
  }
  SET lengths = lengths _ $lb(17, 31, 73, 47, 23)
  SET hash=$$knot^Advent17.Day10(.data, lengths, 256, 64)
  RETURN hash
}
toBits(str) public {
  SET bits = ""
  FOR i=1:1:$l(str) {
    SET c = $zhex($e(str, i))
    SET b = $factor(c)
    FOR j=4:-1:1 {
      SET $bit(bits, $bitcount(bits) + 1) = $bit(b,j)
    }
  }
  RETURN bits
}
max(&list, &ind, delim = ",") public {
  SET max = -99999,ind=""
  IF $d(list)\10 {
    SET el=""
    FOR {
      SET el=$o(list(el), 1, v)
      QUIT:el=""
      IF $d(v),v>max {
        SET max=v,ind=el
      } ELSEIF '$d(v),el>max {
        SET max=el
      }
    }
  } ELSE {
    IF '$lv(list) set list=$lfs(list, delim)
    FOR i=1:1:$ll(list) {
      SET v = $lg(list, i)
      IF v>max set max=v,ind=i
    }
  }
  RETURN max
}
min(&list, &ind, delim = ",") public {
  SET min = 99999999,ind=""
  IF $d(list)\10 {
    SET el=""
    FOR {
      SET el=$o(list(el), 1, v)
      QUIT:el=""
      IF $d(v),v<min {
        SET min=v,ind=el
      } ELSEIF '$d(v),el<min {
        SET min=el
      }
    }
  } ELSE {
    IF '$lv(list) set list=$lfs(list, delim)
    FOR i=1:1:$ll(list) {
      SET v = $lg(list, i)
      IF v<min set min=v,ind=i
    }
  }
  RETURN min
}
sum(list, delim = ",") public {
  SET sum = 0
  IF $d(list)\10 {
    SET el=""
    FOR {
      SET el=$o(list(el), 1, v)
      QUIT:el=""
      IF $i(sum, v)
    }
  } ELSE {
    IF '$lv(list) set list=$lfs(list, delim)
    FOR i=1:1:$ll(list) {
      SET v = $lg(list, i)
      IF $i(sum, v)
    }
  }
  RETURN sum
}
sort(list) public {
  FOR i=1:1:$l(list) {
    SET c = $e(list, i)
    IF $i(sort(c))
  }
  SET res = ""
  SET c = ""
  FOR {
    SET c = $o(sort(c), 1, cnt)
    QUIT:c=""
    SET res = res _ $tr($j("", cnt), " ", c)
  }
  RETURN res
}
toHex(string) public {
  SET res = ""
  FOR i=1:1:$l(string) {
    SET val = $a(string, i)
    SET hex = $zcvt($tr($j($zhex(val), 2), " ", "0"), "l")
    SET res = res_hex
  }
  RETURN res
}
insert(data, pos, val) public {
  SET val = $li(data, 1, pos)_$lb(val)_$li(data, pos + 1, $ll(data))
  RETURN val
}
dec(bit, len = 32) public {
  SET res = 0
  FOR i=1:1:len {
    CONTINUE:'$BIT(bit, i)
    SET res = res + (2**(i-1))
  }
  RETURN res
}
and(a, b, len = 32) public {
  SET a = $FACTOR(a)
  SET b = $FACTOR(b)
  RETURN $$dec($BITLOGIC(a&b, len))
}
or(a, b, len = 32) public {
  SET a = $FACTOR(a)
  SET b = $FACTOR(b)
  RETURN $$dec($BITLOGIC(a|b, len))
}
xor(a, b, len = 32) public {
  SET a = $FACTOR(a)
  SET b = $FACTOR(b)
  RETURN $$dec($BITLOGIC(a^b, len))
}